#!/usr/bin/python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_stp_interface
short_description: Manage STP resources in EOS
description:
  - Provides active state management of STP interface configuration on
    Arista EOS nodes. All configuration of resources is idempotent unless
    otherwise specified.
author: Arista EOS+
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
  - pyeapi 0.1.0 or later
options:
  name:
    description:
      - The interface name assocated with this resource.
    required: true
  portfast:
    description:
      - Configures the portfast value of the STP interface.  Valid values
        include edge, network or disable
    choices: ['edge', 'network', 'disable']
  bpduguard:
    description:
      - Enables or disables the BPDU guard feature for the STP interface
    choices: BOOLEANS
  config:
    description:
      - Configures the path to the pyeapi config file
  connection:
    description:
      - Configures the name of the connection to use from the eapi.conf file
    default: 'localhost'
  state:
    description:
      - The state of the VLAN related to the current running configuration
    default: 'present'
    choices: ['present', 'absent']
  null_as_default:
    description:
      - Instructs the module how to handle null values.  If this flag is set
        then null values trigger default configuration otherwise do nothing
    default: false
    choices: BOOLEANS
"""
import syslog

from ansible.module_utils.basic import *

import pyeapi

def log(entry):
    syslog.openlog('ansible-eos')
    syslog.syslog(syslog.LOG_NOTICE, str(entry))

def get_instance(node, name):
    """ Returns an instance of Stp interface config from the node

    Response

    .. code-block:: json

        {
            "name": <string>,
            "state: [absent, present],
            "portfast": [edge, network, disable],
            "bpduguard: [true, false]
        }

    Args:
        node (Node): An instance of pyeapi.client.Node

        name (str): The interface name to retrieve the instance for

    Returns:
        A Ptyhon dictionary object that represents the STP resource
    """
    result = node.api('stp').interfaces.get(name)
    instance = dict(name=name, state='absent')
    if name in result:
        instance['state'] = 'present'
        instance['portfast'] = result[name]['portfast']
        instance['bpduguard'] = result[name]['bpduguard']
    return instance

def set_attribute(node, method_name, name, value, default):
    log('Invoked %s for interface  %s with value %s and default %s'\
        % (method_name, name, value, default))
    method = getattr(node.api('stp'), method_name)
    return method(name, value, default)

def set_bpduguard(node, name, **kwargs):
    """ Configures the bpduguard attribute for the name

    Args:
        node (Node): An instance of pyeapi.client.Node used for sending and
            receiveing eAPI messages
       name (str): The interface name to configure the bpduguard value for
       kwargs: Optional keyword arguments

    Returns:
        True if the command was completed successfully otherwise False is
            returned

    """
    default = kwargs.get('default', False)
    value = kwargs['name']
    return set_attribute(node, 'set_bpduguard', name, value, default)

def set_portfast(node, name, **kwargs):
    """ Configures the portfast attribute for the name

    Args:
        node (Node): An instance of pyeapi.client.Node used for sending and
            receiveing eAPI messages
       name (str): The interface name to configure the portfast value for
       kwargs: Optional keyword arguments

    Returns:
        True if the command was completed successfully otherwise False is
            returned

    """
    default = kwargs.get('default', False)
    value = kwargs['name']
    return set_attribute(node, 'set_portfast', name, value, default)


def main():
    """ The main module routine called when the module is run by Ansible
    """

    argument_spec = dict(
        name=dict(required=True),
        portfast=dict(choices=['edge', 'network', 'disable']),
        bpduguard=dict(type='bool'),
        config=dict(),
        connection=dict(default='localhost'),
        null_as_default=dict(type='bool', default=False),
        state=dict(default='present', choices=['present', 'absent'])
    )

    module = AnsibleModule(argument_spec=argument_spec,
                           supports_check_mode=True)

    if module.params['config']:
        pyeapi.load_config(module.params['config'])
    node = pyeapi.connect_to(module.params['connection'])

    result = dict(changed=False, created=False, removed=False, changes=dict())
    state = module.params['state']
    null_as_default = module.params['null_as_default']

    name = module.params['name']

    attributes = {
        'name': name,
        'portfast': module.params['portfast'],
        'bpduguard': module.params['bpduguard']
    }

    instance = get_instance(node, name)

    if state == 'present':
        changeset = attributes.viewitems() - instance.viewitems()
        for key, value in changeset:
            func = 'set_%s' % key
            if func in globals():
                command = globals().get(func)
                default = value is None and null_as_default
                if value is not None or default:
                    if not result['created']:
                        result['changes'][key] = value
                    if not module.check_mode:
                        command(node, **attributes)

    changed = result['removed'] or result['created'] or result['changes']
    result['changed'] = changed

    result['instance'] = get_instance(node, name)
    module.exit_json(**result)

main()
