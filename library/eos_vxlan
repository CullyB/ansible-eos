#!/usr/bin/python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_vxlan
short_description: Manage VXLAN virtual tunnint interface
description:
  - Provides active state management of vxlan interface
    configuration on Arista EOS nodes. All configuration of
    resources is idempotent unless otherwise specified.
author: Arista EOS+
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
  - pyeapi 0.1.0 or later
options:
  name:
    description:
      - The unique interface identifier name.  The interface name must use
        the full interface name (no abbreviated names).  For example,
        interfaces should be specified as Ethernet1 not Et1
    required: true
  enable:
    description:
      - Configures the administrative state for the interface.
    required: false
    choices: BOOLEANS
  description:
    description:
      - Sets a one line ASCII description for the interface.
    required: false
  source_interface:
    description:
      - Configures the source interface to source messages from for the
        Vxlan virtual tunnel interface.  This value must be a Loopback
        interface
    required: false
  multicast_group:
    description:
      - Configures the Vxlan multicast group address for flooding.  This
        value must be a valid mutlicast address
    required: false
  config:
    description:
      - Configures the path to the pyeapi config file
  connection:
    description:
      - Configures the name of the connection to use from the eapi.conf file
    default: 'localhost'
  state:
    description:
      - The state of the VLAN related to the current running configuration
    default: 'present'
    choices: ['present', 'absent']
"""
import syslog

from ansible.module_utils.basic import *

import pyeapi

class EosAnsibleModule(AnsibleModule):

    common_args = {
        'config': dict(),
        'username': dict(),
        'password': dict(),
        'connection': dict(default='localhost'),
        'state': dict(default='present', choices=['present', 'absent'])
    }

    def __init__(self, *args, **kwargs):

        kwargs['argument_spec'].update(self.common_args)
        super(EosAnsibleModule, self).__init__(*args, **kwargs)

        self._attributes = self.map_argument_spec()
        self.validate()

        self._node = self.connect()

        self._instance = None
        self.desired_state = self._attributes['state']

        self.supports_create = True
        self.supports_remove = True

        self.result = dict(changed=False, changes=dict())

    def map_argument_spec(self):
        attrs = dict()
        attrs = dict([(key, self.params[key]) for key in self.params])
        return attrs

    def set_supports_create(self, value):
        self.supports_create = value

    def set_supports_remove(self, value):
        self.supports_remove = value

    @property
    def instance(self):
        if self._instance:
            return self._instance
        func = self.func('instance')
        if not func:
            self.fail_json(msg='Module does not support "instance"')
        self._instance = func(self)
        return self._instance

    @property
    def attributes(self):
        return self._attributes

    @property
    def node(self):
        if self._node:
            return self._node
        self._node = self.connect()

    def create(self):
        if not self.check_mode:
            func = self.func('create')
            if not func and self.supports_create:
                self.fail_json(msg='Module must define "create"')
            return func(self)

    def remove(self):
        if not self.check_mode:
            func = self.func('remove')
            if not func and self.supports_remove:
                self.fail_json(msg='Module must define "remove"')
            return func(self)
        return self._node

    def flush(self):
        if self.desired_state == 'present':
            if self.instance['state'] == 'absent':
                self.create()
                self.refresh()
                self.result['changed'] = True

            changeset = self.attributes.viewitems() - self.instance.viewitems()
            changes = self.update(changeset)
            if changes:
                self.result['changes'] = changes
                self.result['changed'] = True

        elif self.instance['state'] == 'present' and self.desired_state == 'absent':
            self.remove()
            self.result['changed'] = True

        self.refresh()

    def update(self, changeset):
        changes = dict()
        for key, value in changeset:
            func_name = 'set_%s' % key
            func = self.func(func_name)
            if func and value is not None:
                changes[key] = value
                if not self.check_mode:
                    func(self)
        return changes

    def validate(self):
        for key, value in self._attributes.items():
            func = self.func('validate_%s' % key)
            if func and value is not None:
                try:
                    func(value)
                except AttributeError as exc:
                    self.fail_json(msg=exc.message)

    def connect(self):
        if self.params['config']:
            pyeapi.load_config(self.params['config'])

        config = pyeapi.config_for(self.params['connection'])
        if not config:
            msg = 'Connection name "%s" not found' % self.params['connection']
            self.fail_json(msg=msg)

        if self.params['username']:
            config['username'] = self.params['username']

        if self.params['password']:
            config['password'] = self.params['password']

        connection = pyeapi.connect(**config)
        node = pyeapi.client.Node(connection)

        return node

    def func(self, name):
        return globals().get(name)

    def refresh(self):
        self._instance = None




def log(entry):
    """ Writes an entry to the local syslog

    Args:
        entry (str): The text string to write to syslog

    """
    syslog.openlog('ansible-eos')
    syslog.syslog(syslog.LOG_NOTICE, str(entry))

def instance(module):
    """ Returns the vxlan interface properties for the specified name
    """
    name = module.attributes['name']
    result = module.node.api('interfaces').get(name)
    _instance = dict(name=name, state='absent')
    if result:
        _instance['state'] = 'present'
        _instance['enable'] = not result['shutdown']
        _instance['description'] = result['description']
        _instance['source_interface'] = result['source_interface']
        _instance['multicast_group'] = result['multicast_group']
        _instance['udp_port'] = result['udp_port']
    return _instance

def create(module):
    """Creates a new instance of the Vxlan interface on the node
    """
    module.node.api('interfaces').create(module.attributes['name'])

def remove(module):
    """Removes an existing instance of the Vxlan interface on the node
    """
    module.node.api('interfaces').delete(module.attributes['name'])


def set_description(module):
    """ Configures the description attribute for the interface
    """
    value = module.attributes['description']
    name = module.attributes['name']
    module.node.api('interfaces').set_description(name, value)

def set_enable(module):
    """ Configures the enable attribute for the interface
    """
    value = not module.attributes['enable']
    name = module.attributes['name']
    module.node.api('interfaces').set_shutdown(name, value)

def set_source_interface(module):
    """ Configures the source interface attribute for the interface
    """
    value = module.attributes['source_interface']
    name = module.attributes['name']
    module.node.api('interfaces').set_source_interface(name, value)


def set_multicast_group(module):
    """ Configures the multicast group attribute for the interface
    """
    value = module.attributes['multicast_group']
    name = module.attributes['name']
    module.node.api('interfaces').set_multicast_group(name, value)

def set_udp_port(module):
    """ Configures the multicast group attribute for the interface
    """
    value = module.attributes['udp_port']
    name = module.attributes['name']
    module.node.api('interfaces').set_udp_port(name, value)

def validate_udp_port(value):
    if value < 1024 or value > 65536:
        raise AttributeError('udp_port must be between 1024 and 65535')



def main():
    """ The main module routine called when the module is run by Ansible
    """

    argument_spec = dict(
        name=dict(),
        enable=dict(type='bool', default=True),
        description=dict(),
        source_interface=dict(),
        multicast_group=dict(),
        udp_port=dict(type='int')
    )

    module = EosAnsibleModule(argument_spec=argument_spec,
                              supports_check_mode=True)

    module.flush()

    result = module.result
    result['instance'] = module.instance

    module.exit_json(**result)

main()
